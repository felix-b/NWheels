using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ElectricityBilling.Domain.Customers;
using NWheels;
using NWheels.DB;
using NWheels.Ddd;
using MemberContract = NWheels.MemberContract;

namespace ElectricityBilling.Domain.Billing
{
    public class InvoiceEntity
    {
        [MemberContract.InjectedDependency]
        private readonly IOperatingSystemEnvironment _systemEnvironment;

        [MemberContract.AutoGenerated]
        private readonly long _id;

        [MemberContract.AutoGenerated(
            Option = GeneratedValueOption.Database,
            ValueFormatString = "{StartDate:yyyyMM}-{Cusotmer.Id:00000000}-{$COUNTER$}")]
        private readonly string _referenceNumber;

        [NWheels.DB.MemberContract.ManyToOne]
        private readonly CustomerEntity.Ref _customer;

        private readonly BillingPeriodValueObject _billingPeriod;
        private readonly DateTime _createdAt;
        private readonly IReadOnlyList<InvoiceRowValueObject> _rows;

        [MemberContract.Semantics.Utc]
        private DateTime? _invalidatedAt;

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public InvoiceEntity(Injector<IOperatingSystemEnvironment> injector)
        {
            injector.Inject(out _systemEnvironment);
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public InvoiceEntity(
            Injector<IOperatingSystemEnvironment> injector,
            CustomerEntity.Ref customer, BillingPeriodValueObject billingPeriod, IEnumerable<InvoiceRowValueObject> rows)
        {
            injector.Inject(this, out _id, out _systemEnvironment);

            _customer = customer;
            _billingPeriod = billingPeriod;
            _createdAt = _systemEnvironment.UtcNow;
            _rows = rows.ToArray();
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public void Invalidate()
        {
            if (_invalidatedAt.HasValue)
            {
                throw new InvalidRequestDomainException("Current invoice was already invalidated.");
            }

            _invalidatedAt = _systemEnvironment.UtcNow;
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public long Id => _id;
        public string ReferenceNumber => _referenceNumber;
        public CustomerEntity.Ref Customer => _customer;
        public BillingPeriodValueObject BillingPeriod => _billingPeriod;
        public DateTime CreatedAt => _createdAt;
        public DateTime? InvalidatedAt => _invalidatedAt;
        public IReadOnlyList<InvoiceRowValueObject> Rows => _rows;

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public static void BulkInvalidateBillingPeriod(IRepository<InvoiceEntity> repository, BillingPeriodValueObject billingPeriod)
        {
            repository.BulkUpdate(
                where: invoice =>
                    invoice.InvalidatedAt == null &&
                    invoice.BillingPeriod.StartDate >= billingPeriod.StartDate &&
                    invoice.BillingPeriod.EndDate < billingPeriod.EndDate,
                update: builder => 
                    builder.Set(x => x.InvalidatedAt, () => DateTime.UtcNow));
        }
    }
}

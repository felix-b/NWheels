using System;
using ElectricityBilling.Domain.Customers;
using ElectricityBilling.Domain.Sensors;
using NWheels;
using NWheels.Ddd;

namespace ElectricityBilling.Domain.Billing
{
    public class ContractEntity
    {
        [MemberContract.InjectedDependency]
        private readonly IThisDomainObjectServices _thisObject;

        [MemberContract.InjectedDependency]
        private readonly IMyLocalizables _localizables;

        [MemberContract.InjectedDependency]
        private readonly IOperatingSystemEnvironment _systemEnvironment;

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        [MemberContract.AutoGenerated]
        private readonly long _id;

        private readonly DateTime _validFrom;
        private readonly CustomerEntity.Ref _customer;
        private readonly SensorEntity.Ref _sensor;
        private readonly PricingPlanEntity.Ref _pricingPlan;
        private DateTime? _validUntil;
        private ContractEntity.Ref _nextContract;

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public ContractEntity(Injector<IMyLocalizables, IOperatingSystemEnvironment> injector)
        {
            injector.Inject(this, out _thisObject, out _localizables, out _systemEnvironment);
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public ContractEntity(
            Injector<IMyLocalizables, IOperatingSystemEnvironment> injector,
            CustomerEntity.Ref customer, 
            SensorEntity.Ref sensor, 
            PricingPlanEntity.Ref pricingPlan)
            : this(injector)
        {
            _customer = customer;
            _sensor = sensor;
            _pricingPlan = pricingPlan;
            _validFrom = _systemEnvironment.UtcNow;
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public void ReplaceWith(ContractEntity nextContract)
        {
            if (nextContract.ValidFrom < this.ValidFrom)
            {
                throw new DomainValidationException<ContractEntity>(
                    this, _localizables.NextContractCannotBeValidBeforeCurrentContract);
            }

            _nextContract = nextContract;
            _validUntil = nextContract.ValidFrom;
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public long Id => _id;
        public DateTime ValidFrom => _validFrom;
        public DateTime? ValidUntil => _validUntil;
        public ContractEntity.Ref NextContract => _nextContract;
        public CustomerEntity.Ref Customer => _customer;
        public SensorEntity.Ref Sensor => _sensor;
        public PricingPlanEntity.Ref PricingPlan => _pricingPlan;

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public TimeSpan ValidityTimeSpan => _validUntil.GetValueOrDefault(_systemEnvironment.UtcNow).Subtract(_validFrom);

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public struct Ref
        {
            public readonly long Id;
            public Ref(long id) => this.Id = id;
            public static implicit operator Ref(ContractEntity entity) => new Ref(entity.Id);
            public static implicit operator Ref(long id) => new Ref(id);
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        [NWheels.I18n.TypeContract.Localizables]
        public interface IMyLocalizables
        {
            string NextContractCannotBeValidBeforeCurrentContract { get; }
        }
    }
}

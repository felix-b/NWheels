using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using NWheels.Ddd;
using NWheels.I18n;
using NWheels.Microservices;
using NWheels.RestApi;
using NWheels.UI.Components;

namespace NWheels
{
    public interface IInjectorFactory
    {
        Injector Create<TTarget>();
        Injector<T1> Create<TTarget, T1>();
        Injector<T1, T2> Create<TTarget, T1, T2>();
    }

    public struct Injector
    {
        public void Inject<TTarget>(TTarget target, out IThisDomainObjectServices thisObject)
        {
            thisObject = null;
        }
        public void Inject<TTarget, TId>(TTarget target, out TId entityId)
        {
            entityId = default(TId);
        }
        public void Inject<TTarget, TId>(TTarget target, out TId entityId, out IThisDomainObjectServices thisObject)
        {
            thisObject = null;
            entityId = default(TId);
        }
        public IInjectorFactory Factory => null;
    }

    public struct Injector<T1>
    {
        public void Inject<TTarget>(TTarget target, out IThisDomainObjectServices thisObject, out T1 service1)
        {
            thisObject = null;
            service1 = default(T1);
        }
        public void Inject<TTarget, TId>(TTarget target, out TId entityId, out IThisDomainObjectServices thisObject, out T1 service1)
        {
            thisObject = null;
            entityId = default(TId);
            service1 = default(T1);
        }
        public void Inject<TTarget, TId>(TTarget target, out TId entityId, out T1 service1)
        {
            entityId = default(TId);
            service1 = default(T1);
        }
        public void Inject(out T1 service1)
        {
            service1 = default(T1);
        }
        public IInjectorFactory Factory => null;
    }
    public struct Injector<T1, T2>
    {
        public void Inject<TTarget>(TTarget target, out IThisDomainObjectServices thisObject, out T1 service1, out T2 service2)
        {
            thisObject = null;
            service1 = default(T1);
            service2 = default(T2);
        }
        public void Inject<TTarget, TId>(TTarget target, out TId entityId, out IThisDomainObjectServices thisObject, out T1 service1, out T2 service2)
        {
            thisObject = null;
            entityId = default(TId);
            service1 = default(T1);
            service2 = default(T2);
        }
        public void Inject<TTarget, TId>(TTarget target, out TId entityId, out T1 service1, out T2 service2)
        {
            entityId = default(TId);
            service1 = default(T1);
            service2 = default(T2);
        }
        public void Inject(out T1 service1, out T2 service2)
        {
            service1 = default(T1);
            service2 = default(T2);
        }
        public IInjectorFactory Factory => null;
    }

    public interface IOperatingSystemEnvironment
    {
        DateTime UtcNow { get; }
    }

    public static class TypeContract
    {
        public static class Presentation
        {
            public class DefaultFormatAttribute : Attribute
            {
                public DefaultFormatAttribute(string formatPattern)
                {
                }
            }
        }

        public class InjectorAttribute : Attribute
        {
        }
    }

    public static class ParameterContract
    {
        public class InjectedDependencyAttribute : Attribute
        {
        }
    }

    public static class MemberContract
    {
        public class TransientAttribute : Attribute
        {
        }
        public class PersistentAttribute : Attribute
        {
            public PersistentAttribute(bool isPersistent = true)
            {
            }
        }
        public class InjectedDependencyAttribute : Attribute
        {
        }
        public class AutoGeneratedAttribute : Attribute
        {
            public AutoGeneratedAttribute()
            {
            }
            public string ValueFormatString { get; set; }
            public GeneratedValueOption Option { get; set; }
        }
        public class EntityIdAttribute : Attribute
        {
        }
        public class RequiredAttribute : Attribute
        {
            public RequiredAttribute(bool allowEmpty = false)
            {
            }
        }

        public static class Semantics
        {
            public class StartRangeAttribute : Attribute
            {
                public StartRangeAttribute()
                {
                }
                public string EndMember { get; set; }
            }
            public class EmailAddressAttribute : Attribute
            {
            }
            public class PhoneNumberAttribute : Attribute
            {
            }
            public class CurrencyAttribute : Attribute
            {
            }
            public class UtcAttribute : Attribute
            {
            }
            public class PasswordClearAttribute : Attribute
            {
            }
            public class PasswordCipherAttribute : Attribute
            {
            }
            public class StreetAttribute : Attribute
            {
            }
            public class StreetNumberAttribute : Attribute
            {
            }
            public class CityAttribute : Attribute
            {
            }
            public class CountryStateAttribute : Attribute
            {
            }
            public class CountryAttribute : Attribute
            {
            }
            public class CountyAttribute : Attribute
            {
            }
            public class ZipCodeAttribute : Attribute
            {
            }
            public class DateTimeResolutionAttribute : Attribute
            {
                public DateTimeResolutionAttribute(DateTimeResolution resolution)
                {
                }
            }
            public class DayOfWeekAttribute : Attribute
            {
            }
            public class DayOfMonthAttribute : Attribute
            {
            }
            public class MonthAttribute : Attribute
            {
            }
            public class YearAttribute : Attribute
            {
            }
            public class CultureAttribute : Attribute
            {
            }
        }

        public static class Validation
        {
            public class NonNegativeAttribute : Attribute
            {
            }
            public class UniqueAttribute : Attribute
            {
            }
            public class MaxLength : Attribute
            {
                public MaxLength(int length)
                {
                }
            }
            public class GreaterThanMember : Attribute
            {
                public GreaterThanMember(string memberName)
                {
                }
            }
        }

        public static class Presentation
        {
            public class DefaultObjectDisplayAttribute : Attribute
            {
                public DefaultObjectDisplayAttribute()
                {
                }
                public DefaultObjectDisplayAttribute(string formatPattern)
                {
                }
            }
        }
    }

    public enum GeneratedValueOption
    {
        Default,
        Application,
        Database
    }

    public enum DateTimeResolution
    {
        Years,
        Months,
        Days,
        Hours,
        Minutes,
        Seconds
    }

    namespace Authorization
    {
        public static class SecurityContract
        {
            public class AllowAnonymousAttribute : Attribute
            {
            }

            public class Require : Attribute
            {
                public Require(object claim)
                {
                    this.Claim = claim;
                }

                public object Claim { get; }
            }
        }
    }

    namespace I18n
    {
        public interface ILocalizationService
        {
            string GetLocalDisplayString<T>(T value, string formatPattern);
            string GetLocalDisplayString<T>(T value, Attribute memberContract);
        }

        public static class TypeContract
        {
            public class LocalizablesAttribute : Attribute
            {
                public string DefaultCulture { get; set; }
            }
        }

        public static class MemberContract
        {
            public class InDefaultCulture : Attribute
            {
                public InDefaultCulture(object cultureSpecificvalue)
                {
                }
            }
            public class FormatDataSourceAttribute : Attribute
            {
                public FormatDataSourceAttribute(Type dataSourceType)
                {
                }
            }
            public class CultureScopeMethod : Attribute
            {
            }
        }
    }

    namespace Transactions
    {
        public interface ITransactionFactory
        {
            IUnitOfWork NewUnitOfWork();
        }

        public interface IUnitOfWork : IDisposable
        {
            Task CommitAsync();
            Task DiscardAsync();
        }
    }

    namespace RestApi
    {
        using NWheels.Microservices;

        public class AspNetCoreSwaggerStack
        {
        }

        public class ResourceCatalogBuilder
        {
        }

        public static class MicroserviceHostBuilderExtensions
        {
            public static MicroserviceHostBuilder ExposeRestApiResources(
                this MicroserviceHostBuilder hostBuilder,
                Action<ResourceCatalogBuilder> buildCatalog)
            {
                return hostBuilder;
            }
        }

        public static class ComponentContainerBuilderExtensions
        {
            public static IComponentContainerBuilder RegisterRestApiResources(
                this IComponentContainerBuilder containerBuilder, 
                Action<ResourceCatalogBuilder> buildCatalog)
            {
                return containerBuilder;
            }
        }
    }

    namespace DB
    {
        public unsafe struct PrimaryKeyType
        {
            public fixed byte Bytes[16];
        }

        public static class TypeContract
        {
            public class ViewAttribute : Attribute
            {
                public ViewAttribute(Type over)
                {
                }
            }
        }

        public static class MemberContract
        {
            public class MapToMemberAttribute : Attribute
            {
                public MapToMemberAttribute(Type type, string memberName)
                {
                }
            }
            public class ManyToOneAttribute : Attribute
            {
            }
        }

        public static class EnumerableExtensions
        {
            public static IAsyncEnumerable<T> AsAsync<T>(this IEnumerable<T> source)
            {
                throw new NotImplementedException();
            }
        }

        public interface IAsyncEnumerator<out T> : IDisposable
        {
            Task ResetAsync();
            Task<bool> MoveNextAsync();
            T Current { get; }
        }

        public interface IAsyncEnumerable<T>
        {
            IAsyncEnumerable<T> Take(long count);
            IAsyncEnumerable<T> While(Func<T, Task<bool>> predicateAsync, Func<T, Task> actionAsync);
            IAsyncEnumerable<T> Skip(long count);
            IAsyncEnumerable<T> SkipWhile(Func<T, Task<bool>> predicateAsync);
            IAsyncEnumerable<T> SkipWhile(Func<T, Task<bool>> predicateAsync, out long skippedCount);
            IAsyncEnumerable<TOther> Cast<TOther>();
            IAsyncEnumerable<TOther> OfType<TOther>();
            Task<IAsyncEnumerator<T>> GetEnumeratorAsync();
            Task ForEachAsync(Func<T, Task> actionAsync);
            Task ForEachAsync(Action<T> action);
            Task<bool> AnyAsync();
            Task<long> CountAsync();
            Task<T> FirstAsync();
            Task<T> FirstOrDefaultAsync();
            Task<T> LastAsync();
            Task<T> LastOrDefaultAsync();
            Task<List<T>> ToListAsync();
            Task<Dictionary<TKey, T>> ToDictionaryAsync<TKey>(Func<T, TKey> keySelector);
            Task<Dictionary<TKey, TValue>> ToDictionaryAsync<TKey, TValue>(Func<T, TKey> keySelector, Func<T, TValue> valueSelector);
            Task<T[]> ToArrayAsync();
        }

        public static class AsyncEnumerableExtensions
        {
            public static Task<Dictionary<TKey, TValue>> ToDictionaryAsync<TKey, TValue>(
                this IAsyncEnumerable<KeyValuePair<TKey, TValue>> query)
            {
                return query.ToDictionaryAsync<TKey, TValue>(x => x.Key, x => x.Value);
            }
        }

        public interface IAsyncGrouping<TKey, TElement> : IAsyncEnumerable<TElement>
        {
            TKey Key { get; }
        }

        public interface IAsyncQuery<T> : IAsyncEnumerable<T>
        {
            IAsyncQuery<T> Where(Expression<Func<T, bool>> predicate);
            IAsyncQuery<IAsyncGrouping<TKey, T>> GroupBy<TKey>(Expression<Func<T, TKey>> keySelector);
            IOrderedAsyncQuery<T> OrderBy<TField>(Expression<Func<T, TField>> field);
            IOrderedAsyncQuery<T> OrderByDescending<TField>(Expression<Func<T, TField>> field);
        }

        public interface IOrderedAsyncQuery<T> : IAsyncEnumerable<T>
        {
            IOrderedAsyncQuery<T> ThenBy<TField>(Expression<Func<T, TField>> field);
            IOrderedAsyncQuery<T> ThenByDescending<TField>(Expression<Func<T, TField>> field);
        }

        public interface IRepository<T> : IEnumerable<T>
        {
            IAsyncQuery<TResult> Query<TResult>(Func<IQueryable<T>, IQueryable<TResult>> query);
            T New(Func<T> constructor);
            void Delete(T obj);
            void BulkUpdate(Expression<Func<T, bool>> where, Action<IUpdateBuilder<T>> update);
            void BulkDelete(Expression<Func<T, bool>> where);
        }

        public interface IUpdateBuilder<T>
        {
            IUpdateBuilder<T> Set<TValue>(Expression<Func<T, TValue>> member, Expression<Func<TValue>> value);
        }

        public interface IView<T>
        {
            IAsyncQuery<T> Query(Func<IQueryable<T>, IQueryable<T>> query);
        }

        public class EFCoreStack
        {
        }
    }

    namespace Ddd
    {
        using  NWheels.RestApi;

        public interface IDomainObjectValidator
        {
            void Report<TDomainObject>(
                Expression<Func<TDomainObject, object>> member, 
                ValidationErrorType errorType, 
                string errorMessage);
        }

        public interface IDomainObjectValidator<T> : IDomainObjectValidator
        {
            void InvalidValue(Expression<Func<T, object>> member, string message = null);
            void NullValue(Expression<Func<T, object>> member, string message = null);
            void EmptyValue(Expression<Func<T, object>> member, string message = null);
            void ValueOutOfRange(Expression<Func<T, object>> member, string message = null);
            void ValueDoesNotMatchPattern(Expression<Func<T, object>> member, string message = null);
        }

        [Serializable]
        public class DomainValidationException : Exception
        {
            public DomainValidationException(string message) : base(message)
            {
            }
        }

        [Serializable]
        public class DomainValidationException<TObject> : Exception
        {
            public DomainValidationException(TObject obj, string message) : base(message)
            {
            }
        }

        [Serializable]
        public class BrokenInvariantDomainException : Exception
        {
            public BrokenInvariantDomainException(string message) : base(message)
            {
            }
        }

        [Serializable]
        public class InvalidRequestDomainException : Exception
        {
            public InvalidRequestDomainException(string message) : base(message)
            {
            }
        }

        public enum ValidationErrorType
        {
            NotSpecified,
            ValueIsNull,
            ValueIsEmpty,
            ValueIsOutOfRange,
            ValueDoesNotMatchPattern,
            ValueIsInvalid
        }

        public static class EntityRef<TEntity>
            where TEntity : class
        {
            public static EntityRef<TId, TEntity> ToId<TId>(TId id)
            {
                return new EntityRef<TId, TEntity>(id);
            }
        }

        public struct ValueObject<T>
        {
            public bool IsLoaded { get; }
            public bool CanLoad { get; }
            public T Value { get; set; }
        }

        public struct EntityRef<TId, TEntity>
            where TEntity : class
        {
            public EntityRef(TId id)
            {
                this.Id = id;
                this.IsLoaded = false;
                this.CanLoad = false;
                this.Entity = null;
            }

            public EntityRef(TEntity entity)
            {
                this.Id = default(TId);//??
                this.IsLoaded = true;
                this.CanLoad = true;
                this.Entity = entity;
            }

            public TId Id { get; }
            public bool IsLoaded { get; }
            public bool CanLoad { get; }
            public TEntity Entity { get; }

            public static EntityRef<TId, TEntity> To(TEntity entity)
            {
                return new EntityRef<TId, TEntity>(entity);
            }
        }

        public struct EntitySet<TId, TEntity> : IQueryable<TEntity>
            where TEntity : class
        {
            private Type _elementType;
            private Expression _expression;
            private IQueryProvider _provider;
            public bool IsLoaded { get; }
            public bool CanLoad { get; }
            public ISet<EntityRef<TId, TEntity>> Set { get; }

            IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
            {
                throw new NotImplementedException();
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                throw new NotImplementedException();
            }

            Type IQueryable.ElementType
            {
                get { return _elementType; }
            }

            Expression IQueryable.Expression
            {
                get { return _expression; }
            }

            IQueryProvider IQueryable.Provider
            {
                get { return _provider; }
            }
        }

        public struct ValueObjectList<TValueObject>
        {
            public bool IsLoaded { get; }
            public bool CanLoad { get; }
            public IList<TValueObject> List { get; }
        }

        public delegate IThisDomainObjectServices ThisDomainObjectFactory<TObject>(TObject obj);

        public interface IThisDomainObjectServices
        {
            TContext GetContext<TContext>() where TContext : class;

            string FormatDisplayString(ILocalizationService localization);
            string DisplayStringFormatPattern { get; }
        }

        public static class TypeContract
        {
            public class BoundedContextAttribute : Attribute
            {
            }
        }

        public static class ResourceCatalogBuilderExtensions
        {
            public static ResourceCatalogBuilder AddDomainTransaction<TContext>(
                this ResourceCatalogBuilder catalogBuilder, 
                Expression<Func<TContext, Task>> tx)
            {
                return catalogBuilder;
            }

            public static ResourceCatalogBuilder AddDomainRepository<TContext, TAggregate>(this ResourceCatalogBuilder catalogBuilder)
            {
                return catalogBuilder;
            }
        }
    }

    namespace Logging
    {
        public class ElasticStack
        {
        }
    }
    namespace Microservices
    {
        public interface IComponentContainer
        {
        }

        public interface IComponentContainerBuilder
        {
            IComponentContainerBuilder RegisterComponentType<T>();
            IComponentContainerBuilder InstancePerDependency();
            IComponentContainerBuilder ForService<T>();
        }

        public abstract class LifecycleComponentBase
        {
            public abstract void Activate();
        }

        public static class Microservice
        {
            public static int RunDaemonCli(string name, string[] arguments, Action<MicroserviceHostBuilder> builder)
            {
                var host = BuildHost(name, builder);
                return host.RunCli(arguments);
            }

            public static int RunBatchJobCli<TJob, TArguments>(
                string name, 
                string[] arguments, 
                Action<MicroserviceHostBuilder> builder)
            {
                var host = BuildHost(name, builder);
                return host.RunCli(arguments);
            }

            public static MicroserviceHost BuildHost(string name, Action<MicroserviceHostBuilder> builder)
            {
                return new MicroserviceHost();
            }
        }

        public class MicroserviceHostBuilder
        {
            public MicroserviceHostBuilder UseLogging<T>()
            {
                return this;
            }

            public MicroserviceHostBuilder UseDB<T>()
            {
                return this;
            }

            public MicroserviceHostBuilder UseDdd()
            {
                return this;
            }

            public MicroserviceHostBuilder UseApplicationFeature<T>()
            {
                return this;
            }

            public MicroserviceHostBuilder UseMicroserviceXml(string path)
            {
                return this;
            }

            public MicroserviceHostBuilder UseLifecycleComponent<T>()
            {
                return this;
            }

            public MicroserviceHostBuilder UseRestApi<T>()
            {
                return this;
            }

            public MicroserviceHostBuilder UseUidl<T>()
            {
                return this;
            }

            public MicroserviceHostBuilder UseComponents(Action<IComponentContainer, IComponentContainerBuilder> action)
            {
                throw new NotImplementedException();
            }
        }

        public class DefaultFeatureLoaderAttribute : Attribute
        {
        }

        public abstract class FeatureLoaderBase
        {
            public abstract void ContributeComponents(
                IComponentContainer existingComponents,
                IComponentContainerBuilder newComponents);
        }

        public class AutoDiscoverAssemblyOf<T> : FeatureLoaderBase
        {
            public override void ContributeComponents(IComponentContainer existingComponents, IComponentContainerBuilder newComponents)
            {
                throw new NotImplementedException();
            }
        }

        public class MicroserviceHost
        {
            public int RunCli(string[] arguments)
            {
                return 0;
            }

            public Task<int> RunCliAsync(string[] arguments)
            {
                return Task.FromResult(0);
            }
        }
    }

    namespace UI
    {
        public static class TypeContract
        {
            public class TemplateUrlAttribute : Attribute
            {
                public TemplateUrlAttribute(string url)
                {
                }
            }
        }

        public static class MemberContract
        {
            public class TemplatePlaceholderAttribute : Attribute
            {
                public TemplatePlaceholderAttribute(string placeholderName)
                {
                }
            }

            public class InitialViewAttribute : Attribute
            {
                public InitialViewAttribute(Type componenType)
                {
                }
            }

            public static class Storage
            {
                public class ClientMachineAttribute : Attribute
                {
                }
            }
        }

        public static class Empty
        {
            public class Model { }
            public class Session { }
        }

        public class ClientScript
        {
            public ClientPromise BLOCK(Action script)
            {
                return new ClientPromise();
            }

            public ClientPromise IF(Expression<Func<bool>> condition, Func<ClientPromise> @then, Func<ClientPromise> @else = null)
            {
                return new ClientPromise();
            }

            public ServerComponent<TComponent> GetServerComponent<TComponent>()
            {
                return new ServerComponent<TComponent>();
            }

            public ClientPromise RaiseEvent(ClientEvent @event)
            {
                return new ClientPromise();
            }

            public ClientPromise MutateModel(Expression<Func<object>> newModel)
            {
                return new ClientPromise();
            }

            public ClientPromise RaiseEvent<TData>(ClientEvent<TData> @event, Expression<Func<TData>> data)
            {
                return new ClientPromise();
            }

            public class ServerComponent<TComponent>
            {
                public ClientPromise Invoke(Expression<Func<TComponent, Task>> invocation)
                {
                    return new ClientPromise();
                }

                public ClientPromise<TOutput> Invoke<TOutput>(Expression<Func<TComponent, Task<TOutput>>> invocation)
                {
                    return new ClientPromise<TOutput>();
                }
            }
        }

        public class ClientPromiseBase
        {
            public ClientPromise Catch<TException>(Action<ClientError> onError)
            {
                return new ClientPromise();
            }
            public ClientPromise Finally(Action onFinally)
            {
                return new ClientPromise();
            }
        }

        public class ClientPromise : ClientPromiseBase
        {
            public ClientPromise Then(Func<ClientPromise> onSuccess)
            {
                return new ClientPromise();
            }
            public ClientPromise<TResult> Then<TResult>(Func<ClientPromise<TResult>> onSuccess)
            {
                return new ClientPromise<TResult>();
            }
        }

        public class ClientPromise<T> : ClientPromiseBase
        {
            public ClientPromise Then(Action<T> onSuccess)
            {
                return new ClientPromise();
            }
            public ClientPromise<TResult> Then<TResult>(Func<T, TResult> onSuccess)
            {
                return new ClientPromise<TResult>();
            }
        }

        public class ClientEvent
        {
            public void Subscribe(BaseComponent handlerComponent, Func<ClientPromise> handlerScript)
            {
            }
        }

        public class ClientEvent<TData>
        {
            public void Subscribe(BaseComponent handlerComponent, Func<TData, ClientPromise> handler)
            {
            }
        }

        public class ClientError
        {
        }

        namespace Components
        {
            public abstract class BaseComponent
            {
                public class ConfigureAttribute : Attribute
                {
                    public string TemplatePlaceholder { get; set; }
                    public bool BindToParentModel { get; set; }
                    public string ParentModelMember { get; set; }
                }
            }

            public abstract class BaseComponent<TModel> : BaseComponent
            {
                public virtual void Controller()
                {
                }

                public void OnLoad(Action handler)
                {
                    handler?.Invoke();
                }

                public ClientScript Script { get; }
                public TModel Model { get; }
            }

            public static class FrameComponent
            {
                public class ConfigureAttribute : BaseComponent.ConfigureAttribute
                {
                    public Type InitialView { get; set; }
                }
            }

            public class FrameComponent<TModel> : BaseComponent<TModel>
            {
                public ClientPromise NavigateTo<TComponent>()
                {
                    return new ClientPromise();
                }
            }

            public static class TransactionComponent
            {
                public class ConfigureAttribute : BaseComponent.ConfigureAttribute
                {
                }
            }

            public class TransactionComponent<TModel> : BaseComponent<TModel>
            {
                private readonly ClientEvent _onSubmit;
                private readonly ClientEvent _onCompleted;

                public ClientEvent OnSubmit => _onSubmit;
                public ClientEvent OnCompleted => _onSubmit;
            }
        }

        namespace Web
        {
            public class WebReactReduxStack
            {
            }

            public static class MicroserviceHostBuilderExtensions
            {
                public static MicroserviceHostBuilder ExposeWebApp<TWebApp>(
                    this MicroserviceHostBuilder hostBuilder,
                    string baseUrlPath = "/")
                {
                    return hostBuilder;
                }
            }

            public abstract class WebPage<TViewModel> : BaseComponent<TViewModel>
            {
            }

        }
    }
}

